{"version":3,"sources":["model/transactionVM.js","model/defaultObject.js","service/HttpService.js","index.js"],"names":["TransactionVM","id","amount","type","json","task","patch","data","Object","keys","forEach","key","HttpService","endpoint","fetch","BASE_URL","then","res","body","method","headers","JSON","stringify","TableNotebook","state","transactions","balance","accountBalance","setBalance","get","setState","console","error","handleBalanceChange","e","target","value","handleTypeChange","event","handleAddTransaction","transaction","post","setObject","map","this","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","FormControl","className","InputLabel","Select","onChange","MenuItem","TextField","fullWidth","label","Button","size","onClick","TableBody","row","component","scope","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8915cd58.chunk.js","sourcesContent":["import {DefaultObject} from \"./defaultObject\";\n\nexport class TransactionVM extends DefaultObject {\n    id = null;\n    amount = 0;\n    type = null;\n\n    constructor(id, amount, type) {\n        super();\n\n        this.id = id;\n        this.amount = amount;\n        this.type = type;\n    }\n\n\n    static setObject(json) {\n        const task = new TransactionVM();\n        task.patch(json);\n        return task;\n    }\n}\n","export class DefaultObject {\n    patch(data) {\n        Object.keys(data).forEach((key) => {\n            if (key in this) {\n                this[key] = data[key];\n            }\n        });\n    }\n}\n","export default class HttpService {\n    static BASE_URL = \"http://localhost:8080\";\n\n    static get(endpoint, options = {}) {\n        return fetch(`${HttpService.BASE_URL}/api/${endpoint}`).then(res => res.json())\n    }\n\n    static post(endpoint, body) {\n        return fetch(`${HttpService.BASE_URL}/api/${endpoint}`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json;charset=utf-8'\n                },\n                body: JSON.stringify(body)\n            }\n        ).then(res => res.json())\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n    Button,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem\n} from '@material-ui/core';\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {TransactionVM} from \"./model/transactionVM\";\nimport HttpService from \"./service/HttpService\";\n\n\nclass TableNotebook extends React.Component {\n    state = {\n        transactions: [],\n        balance: 0,\n        type: '',\n        accountBalance: 0\n    };\n\n    componentDidMount() {\n        HttpService.get('transactions')\n            .then(\n                (res) => this.setState({transactions: res.map(transaction => TransactionVM.setObject(transaction))}),\n                console.error\n            ).then(this.setBalance);\n    }\n\n    setBalance = () => {\n        HttpService.get('balance')\n            .then(\n                (res) => this.setState({accountBalance: res}),\n                console.error\n            );\n    };\n\n    handleBalanceChange = (e) => {\n        this.setState({balance: e.target.value});\n    };\n\n    handleTypeChange = (event) => {\n        this.setState({type: event.target.value});\n    };\n\n    handleAddTransaction = () => {\n        const {balance, type} = this.state;\n        const transaction = new TransactionVM(null, balance, type);\n\n        HttpService.post('transactions', transaction)\n            .then(\n                (res) => {\n                    this.setState({transactions: [...this.state.transactions, TransactionVM.setObject(res)]});\n                },\n                console.error\n            ).then(this.setBalance);\n    };\n\n    render() {\n        return (\n            <>\n                <h1>Your balance is: {this.state.accountBalance}</h1>\n                <TableContainer>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Type</TableCell>\n                                <TableCell>Amount</TableCell>\n                                <TableCell>Action</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell>\n                                    <FormControl className=\"select\">\n                                        <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={this.handleTypeChange}\n                                        >\n                                            <MenuItem value={\"DEBIT\"}>DEBIT</MenuItem>\n                                            <MenuItem value={\"CREDIT\"}>CREDIT</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                    <TextField value={this.state.balance} onChange={this.handleBalanceChange}\n                                               fullWidth\n                                               type=\"number\"\n                                               label=\"Next transaction\"/>\n                                </TableCell>\n                                <TableCell>\n                                    <Button size=\"small\" onClick={this.handleAddTransaction}>\n                                        Add\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.transactions.map((row) => (\n                                <TableRow key={row.id} className={row.type === \"CREDIT\" ? \"credit\" : \"debit\"}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.type}\n                                    </TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell/>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </>\n        )\n    }\n}\n\nReactDOM.render(\n    <TableNotebook/>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}